
obj/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  000009a0  00000a34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  008001d6  008001d6  00000b0a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000081  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000230  00000000  00000000  00001260  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001250  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004d7  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008dc  00000000  00000000  00002bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  00003494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049d  00000000  00000000  000037b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000807  00000000  00000000  00003c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00004454  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__ctors_end>
   4:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
   8:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
   c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  10:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  14:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  18:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  1c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  20:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  24:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  28:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  2c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  30:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  34:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  38:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  3c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  40:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  44:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  48:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  4c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  50:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  54:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  58:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  5c:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  60:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>
  64:	0c 94 85 01 	jmp	0x30a	; 0x30a <__bad_interrupt>

00000068 <__c.1811>:
  68:	63 61 6c 6c 62 61 63 6b 20 66 72 6f 6d 20 6d 61     callback from ma
  78:	69 6e 6d 65 6e 75 21 0d 0a 00                       inmenu!...

00000082 <__c.1815>:
  82:	63 61 6c 6c 62 61 63 6b 20 66 72 6f 6d 20 73 75     callback from su
  92:	62 6d 65 6e 75 21 0d 0a 00                          bmenu!...

0000009b <__c.1868>:
  9b:	3e 20 42 61 63 6b 21 0d 0a 00                       > Back!...

000000a5 <__c.1873>:
  a5:	3e 20 53 65 6c 65 63 74 21 0d 0a 00                 > Select!...

000000b1 <__c.1878>:
  b1:	3e 20 44 6f 77 6e 21 0d 0a 00                       > Down!...

000000bb <__c.1883>:
  bb:	3e 20 55 70 21 0d 0a 00                             > Up!...

000000c3 <font6x8>:
  c3:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  d3:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  e3:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  f3:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
 103:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
 113:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
 123:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
 133:	49 49 30 03 01 71 09 07 36 49 49 49 36 06 49 49     II0..q..6III6.II
 143:	29 16 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
 153:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 163:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 173:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 183:	09 01 01 3e 41 49 49 3a 7f 08 08 08 7f 00 41 7f     ...>AII:......A.
 193:	41 00 20 41 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. AA?...."A.@@@
 1a3:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 1b3:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
 1c3:	49 49 49 32 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
 1d3:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 1e3:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 1f3:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 203:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 213:	44 44 44 20 38 44 44 48 3f 38 54 54 54 18 08 7e     DDD 8DDH?8TTT..~
 223:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 233:	40 00 20 40 45 3c 00 7f 10 28 44 00 00 41 7f 40     @. @E<...(D..A.@
 243:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 253:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 263:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 273:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 283:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 293:	00 00 41 36 08 00 10 08 08 10 08 08 1c 2a 08 08     ..A6.........*..

000002a3 <small_num>:
 2a3:	0e 15 0e 00 12 1f 10 00 12 19 16 00 11 15 0b 00     ................
 2b3:	07 04 1f 00 17 15 09 00 0e 15 09 00 19 05 03 00     ................
 2c3:	1a 15 0b 00 12 15 0e 00 00 10 00 00 00              .............

000002d0 <__ctors_end>:
 2d0:	11 24       	eor	r1, r1
 2d2:	1f be       	out	0x3f, r1	; 63
 2d4:	cf ef       	ldi	r28, 0xFF	; 255
 2d6:	d8 e0       	ldi	r29, 0x08	; 8
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	cd bf       	out	0x3d, r28	; 61

000002dc <__do_copy_data>:
 2dc:	11 e0       	ldi	r17, 0x01	; 1
 2de:	a0 e0       	ldi	r26, 0x00	; 0
 2e0:	b1 e0       	ldi	r27, 0x01	; 1
 2e2:	e0 ea       	ldi	r30, 0xA0	; 160
 2e4:	f9 e0       	ldi	r31, 0x09	; 9
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x10>
 2e8:	05 90       	lpm	r0, Z+
 2ea:	0d 92       	st	X+, r0
 2ec:	a6 3d       	cpi	r26, 0xD6	; 214
 2ee:	b1 07       	cpc	r27, r17
 2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0xc>

000002f2 <__do_clear_bss>:
 2f2:	11 e0       	ldi	r17, 0x01	; 1
 2f4:	a6 ed       	ldi	r26, 0xD6	; 214
 2f6:	b1 e0       	ldi	r27, 0x01	; 1
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
 2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
 2fc:	a1 3e       	cpi	r26, 0xE1	; 225
 2fe:	b1 07       	cpc	r27, r17
 300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
 302:	0e 94 cf 02 	call	0x59e	; 0x59e <main>
 306:	0c 94 ce 04 	jmp	0x99c	; 0x99c <_exit>

0000030a <__bad_interrupt>:
 30a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000030e <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
 30e:	ff 93       	push	r31
	push	ZL
 310:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
 312:	e0 91 d6 01 	lds	r30, 0x01D6
	lds	ZH, xfunc_out+1	;/
 316:	f0 91 d7 01 	lds	r31, 0x01D7
	sbiw	ZL, 0
 31a:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f
 31c:	09 f0       	breq	.+2      	; 0x320 <xputc+0x12>
	icall
 31e:	09 95       	icall
2:	pop	ZL
 320:	ef 91       	pop	r30
	pop	ZH
 322:	ff 91       	pop	r31
	ret
 324:	08 95       	ret

00000326 <xputs>:

#ifdef USE_XPUTS
.global xputs
.func xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
 326:	fc 01       	movw	r30, r24
1:	_LPMI	r24
 328:	85 91       	lpm	r24, Z+
	cpi	r24, 0
 32a:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
 32c:	11 f0       	breq	.+4      	; 0x332 <xputs+0xc>
	rcall	xputc
 32e:	ef df       	rcall	.-34     	; 0x30e <xputc>
	rjmp	1b
 330:	fb cf       	rjmp	.-10     	; 0x328 <xputs+0x2>
2:	ret
 332:	08 95       	ret

00000334 <xitoa>:
#ifdef USE_XITOA
.global xitoa
.func xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
 334:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
 336:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
 338:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
 33a:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
 33c:	0c c0       	rjmp	.+24     	; 0x356 <xitoa+0x22>
	neg	r20		;
 33e:	41 95       	neg	r20
	sbrs	r25, 7		;
 340:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
 342:	09 c0       	rjmp	.+18     	; 0x356 <xitoa+0x22>
	ldi	r30, '-'	;
 344:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
 346:	60 95       	com	r22
	com	r23		;
 348:	70 95       	com	r23
	com	r24		;
 34a:	80 95       	com	r24
	com	r25		;
 34c:	90 95       	com	r25
	adc	r22, r1		;
 34e:	61 1d       	adc	r22, r1
	adc	r23, r1		;
 350:	71 1d       	adc	r23, r1
	adc	r24, r1		;
 352:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
 354:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
 356:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
 358:	02 c0       	rjmp	.+4      	; 0x35e <xitoa+0x2a>
	neg	r18		;
 35a:	21 95       	neg	r18
	ldi	r19, '0'	;/
 35c:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
 35e:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
 360:	aa 27       	eor	r26, r26
2:	lsl	r22		;
 362:	66 0f       	add	r22, r22
	rol	r23		;
 364:	77 1f       	adc	r23, r23
	rol	r24		;
 366:	88 1f       	adc	r24, r24
	rol	r25		;
 368:	99 1f       	adc	r25, r25
	rol	r26		;
 36a:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
 36c:	a4 17       	cp	r26, r20
	brcs	3f		;
 36e:	10 f0       	brcs	.+4      	; 0x374 <xitoa+0x40>
	sub	r26, r20	;
 370:	a4 1b       	sub	r26, r20
	inc	r22		;
 372:	63 95       	inc	r22
3:	dec	r21		;
 374:	5a 95       	dec	r21
	brne	2b		;/
 376:	a9 f7       	brne	.-22     	; 0x362 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
 378:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
 37a:	08 f0       	brcs	.+2      	; 0x37e <xitoa+0x4a>
	subi	r26, -7		;
 37c:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
 37e:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
 380:	af 93       	push	r26
	inc	r31		;/
 382:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
 384:	61 15       	cp	r22, r1
	cpc	r23, r1		;
 386:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
 388:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
 38a:	91 05       	cpc	r25, r1
	brne	1b		;/
 38c:	41 f7       	brne	.-48     	; 0x35e <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
 38e:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
 390:	11 f4       	brne	.+4      	; 0x396 <xitoa+0x62>
	push	r30		;
 392:	ef 93       	push	r30
	inc	r31		;/
 394:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
 396:	f2 17       	cp	r31, r18
	brcc	6f		;
 398:	18 f4       	brcc	.+6      	; 0x3a0 <xitoa+0x6c>
	push	r19		;
 39a:	3f 93       	push	r19
	inc	r31		;
 39c:	f3 95       	inc	r31
	rjmp	5b		;/
 39e:	fb cf       	rjmp	.-10     	; 0x396 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
 3a0:	8f 91       	pop	r24
	rcall	xputc		;
 3a2:	b5 df       	rcall	.-150    	; 0x30e <xputc>
	dec	r31		;
 3a4:	fa 95       	dec	r31
	brne	6b		;/
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <xitoa+0x6c>

	ret
 3a8:	08 95       	ret

000003aa <xprintf>:

#ifdef USE_XPRINTF
.global xprintf
.func xprintf
xprintf:
	push	YH
 3aa:	df 93       	push	r29
	push	YL
 3ac:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
 3ae:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
 3b0:	de b7       	in	r29, 0x3e	; 62
	clr	YH
#endif
#if FLASHEND > 0x1FFFF
	adiw	YL, 6		;Y = pointer to arguments
#else
	adiw	YL, 5		;Y = pointer to arguments
 3b2:	25 96       	adiw	r28, 0x05	; 5
#endif
	ld	ZL, Y+		;Z = pointer to format string
 3b4:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
 3b6:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
 3b8:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
 3ba:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
 3bc:	21 f0       	breq	.+8      	; 0x3c6 <xprintf+0x1c>
	cpi	r24, '%'	;Is format?
 3be:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
 3c0:	29 f0       	breq	.+10     	; 0x3cc <xprintf+0x22>
1:	rcall	xputc		;Put a normal character
 3c2:	a5 df       	rcall	.-182    	; 0x30e <xputc>
	rjmp	0b		;/
 3c4:	f9 cf       	rjmp	.-14     	; 0x3b8 <xprintf+0xe>
90:	pop	YL
 3c6:	cf 91       	pop	r28
	pop	YH
 3c8:	df 91       	pop	r29
	ret
 3ca:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
 3cc:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
 3ce:	e8 94       	clt
	_LPMI	r21		;Get flags
 3d0:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
 3d2:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
 3d4:	b1 f3       	breq	.-20     	; 0x3c2 <xprintf+0x18>
	cpi	r21, '0'	;Zero filled?
 3d6:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
 3d8:	11 f4       	brne	.+4      	; 0x3de <xprintf+0x34>
	set			;/
 3da:	68 94       	set
22:	_LPMI	r21		;Get width
 3dc:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
 3de:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
 3e0:	48 f4       	brcc	.+18     	; 0x3f4 <xprintf+0x4a>
	subi	r21, '0'	;
 3e2:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
 3e4:	80 f3       	brcs	.-32     	; 0x3c6 <xprintf+0x1c>
	lsl	r18		;
 3e6:	22 0f       	add	r18, r18
	mov	r0, r18		;
 3e8:	02 2e       	mov	r0, r18
	lsl	r18		;
 3ea:	22 0f       	add	r18, r18
	lsl	r18		;
 3ec:	22 0f       	add	r18, r18
	add	r18, r0		;
 3ee:	20 0d       	add	r18, r0
	add	r18, r21	;
 3f0:	25 0f       	add	r18, r21
	rjmp	22b		;/
 3f2:	f4 cf       	rjmp	.-24     	; 0x3dc <xprintf+0x32>

24:	brtc	25f		;get value (low word)
 3f4:	0e f4       	brtc	.+2      	; 0x3f8 <xprintf+0x4e>
	neg	r18		;
 3f6:	21 95       	neg	r18
25:	ld	r24, Y+		;
 3f8:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
 3fa:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
 3fc:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
 3fe:	09 f3       	breq	.-62     	; 0x3c2 <xprintf+0x18>
	cpi	r21, 's'	;Is type RAM string?
 400:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
 402:	29 f1       	breq	.+74     	; 0x44e <xprintf+0xa4>
	cpi	r21, 'S'	;Is type ROM string?
 404:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
 406:	59 f1       	breq	.+86     	; 0x45e <xprintf+0xb4>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
 408:	bc 01       	movw	r22, r24
	clr	r24		;
 40a:	88 27       	eor	r24, r24
	clr	r25		;
 40c:	99 27       	eor	r25, r25
	clt			;/
 40e:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
 410:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
 412:	21 f4       	brne	.+8      	; 0x41c <xprintf+0x72>
	ld	r24, Y+		;get value (high word)
 414:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
 416:	99 91       	ld	r25, Y+
	set			;
 418:	68 94       	set
	_LPMI	r21		;/
 41a:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
 41c:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
 41e:	39 f4       	brne	.+14     	; 0x42e <xprintf+0x84>
	ldi	r20, -10	;
 420:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
 422:	7e f0       	brts	.+30     	; 0x442 <xprintf+0x98>
	sbrs	r23, 7		;
 424:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
 426:	0d c0       	rjmp	.+26     	; 0x442 <xprintf+0x98>
	ldi	r24, -1		;
 428:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
 42a:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
 42c:	0a c0       	rjmp	.+20     	; 0x442 <xprintf+0x98>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
 42e:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
 430:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
 432:	39 f0       	breq	.+14     	; 0x442 <xprintf+0x98>
	cpi	r21, 'X'	;Is type hexdecimal?
 434:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
 436:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
 438:	21 f0       	breq	.+8      	; 0x442 <xprintf+0x98>
	cpi	r21, 'b'	;Is type binary?
 43a:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
 43c:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
 43e:	09 f0       	breq	.+2      	; 0x442 <xprintf+0x98>
	rjmp	90b		;abort
 440:	c2 cf       	rjmp	.-124    	; 0x3c6 <xprintf+0x1c>
40:	push	ZH		;Output the value
 442:	ff 93       	push	r31
	push	ZL		;
 444:	ef 93       	push	r30
	rcall	xitoa		;
 446:	76 df       	rcall	.-276    	; 0x334 <xitoa>
42:	pop	ZL		;
 448:	ef 91       	pop	r30
	pop	ZH		;
 44a:	ff 91       	pop	r31
	rjmp	0b		;/
 44c:	b5 cf       	rjmp	.-150    	; 0x3b8 <xprintf+0xe>

50:	push	ZH		;Put a string on the RAM
 44e:	ff 93       	push	r31
	push	ZL
 450:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
 452:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
 454:	81 91       	ld	r24, Z+
	cpi	r24, 0
 456:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
 458:	b9 f3       	breq	.-18     	; 0x448 <xprintf+0x9e>
	rcall	xputc
 45a:	59 df       	rcall	.-334    	; 0x30e <xputc>
	rjmp	51b
 45c:	fb cf       	rjmp	.-10     	; 0x454 <xprintf+0xaa>

60:	push	ZH		;Put a string on the ROM
 45e:	ff 93       	push	r31
	push	ZL
 460:	ef 93       	push	r30
	rcall	xputs
 462:	61 df       	rcall	.-318    	; 0x326 <xputs>
	rjmp	42b
 464:	f1 cf       	rjmp	.-30     	; 0x448 <xprintf+0x9e>

00000466 <send_char>:
}
/*---------------------------------------------------------------------------*/
void send_char(char c)
{
    /* Wait for empty transmit buffer ... */
    while(!(UCSR0A & (1<<UDRE0)));
 466:	90 91 c0 00 	lds	r25, 0x00C0
 46a:	95 ff       	sbrs	r25, 5
 46c:	fc cf       	rjmp	.-8      	; 0x466 <send_char>

    /* Start sending the data! */
    UDR0 = c;
 46e:	80 93 c6 00 	sts	0x00C6, r24

    /* Wait until the transmission is over ... */
    while(!(UCSR0A & (1<<TXC0)));
 472:	80 91 c0 00 	lds	r24, 0x00C0
 476:	86 ff       	sbrs	r24, 6
 478:	fc cf       	rjmp	.-8      	; 0x472 <send_char+0xc>
}
 47a:	08 95       	ret

0000047c <scallback>:
	xprintf(PSTR("callback from mainmenu!\r\n"));
}
/*---------------------------------------------------------------------------*/
void scallback()
{
	xprintf(PSTR("callback from submenu!\r\n"));
 47c:	00 d0       	rcall	.+0      	; 0x47e <scallback+0x2>
 47e:	82 e8       	ldi	r24, 0x82	; 130
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	ed b7       	in	r30, 0x3d	; 61
 484:	fe b7       	in	r31, 0x3e	; 62
 486:	92 83       	std	Z+2, r25	; 0x02
 488:	81 83       	std	Z+1, r24	; 0x01
 48a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <xprintf>
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
}
 492:	08 95       	ret

00000494 <callback>:
uint8_t backButton_clicked();
uint8_t selectButton_clicked();
/*---------------------------------------------------------------------------*/
void callback()
{
	xprintf(PSTR("callback from mainmenu!\r\n"));
 494:	00 d0       	rcall	.+0      	; 0x496 <callback+0x2>
 496:	88 e6       	ldi	r24, 0x68	; 104
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	ed b7       	in	r30, 0x3d	; 61
 49c:	fe b7       	in	r31, 0x3e	; 62
 49e:	92 83       	std	Z+2, r25	; 0x02
 4a0:	81 83       	std	Z+1, r24	; 0x01
 4a2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <xprintf>
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
}
 4aa:	08 95       	ret

000004ac <init_serial>:
void init_serial()
{
	/* 19200 baud rate with 16 MHz Xtal ... */
	const uint8_t ubrr = 51;

	pinMode(D,0,INPUT);
 4ac:	50 98       	cbi	0x0a, 0	; 10
	pinMode(D,1,OUTPUT);
 4ae:	51 9a       	sbi	0x0a, 1	; 10

	/* Set baud rate */ 
	UBRR0H = (unsigned char)(ubrr>>8); 
 4b0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr; 
 4b4:	83 e3       	ldi	r24, 0x33	; 51
 4b6:	80 93 c4 00 	sts	0x00C4, r24

	/* Enable receiver and transmitter and Receive interupt */ 
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0); 
 4ba:	88 e9       	ldi	r24, 0x98	; 152
 4bc:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8data, 1stop bit no parity */ 
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00); 
 4c0:	86 e0       	ldi	r24, 0x06	; 6
 4c2:	80 93 c2 00 	sts	0x00C2, r24

	/* Set the library ... */
	xfunc_out = send_char;
 4c6:	83 e3       	ldi	r24, 0x33	; 51
 4c8:	92 e0       	ldi	r25, 0x02	; 2
 4ca:	90 93 d7 01 	sts	0x01D7, r25
 4ce:	80 93 d6 01 	sts	0x01D6, r24
}
 4d2:	08 95       	ret

000004d4 <initButtons>:
}
/*---------------------------------------------------------------------------*/
void initButtons()
{
	/* select button */
	pinMode(C,0,INPUT);
 4d4:	38 98       	cbi	0x07, 0	; 7
	internalPullup(C,0,ENABLE);
 4d6:	40 9a       	sbi	0x08, 0	; 8
	
	/* up button */
	pinMode(C,1,INPUT);
 4d8:	39 98       	cbi	0x07, 1	; 7
	internalPullup(C,1,ENABLE);
 4da:	41 9a       	sbi	0x08, 1	; 8
	
	/* back button */
	pinMode(C,2,INPUT);
 4dc:	3a 98       	cbi	0x07, 2	; 7
	internalPullup(C,2,ENABLE);
 4de:	42 9a       	sbi	0x08, 2	; 8
	
	/* down button */
	pinMode(C,3,INPUT);
 4e0:	3b 98       	cbi	0x07, 3	; 7
	internalPullup(C,3,ENABLE);
 4e2:	43 9a       	sbi	0x08, 3	; 8
}
 4e4:	08 95       	ret

000004e6 <upButton_clicked>:
/*---------------------------------------------------------------------------*/
uint8_t upButton_clicked()
{
	if(digitalRead(C,1)==LOW)
	{
		return 1;
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	31 99       	sbic	0x06, 1	; 6
 4ea:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
 4ec:	08 95       	ret

000004ee <downButton_clicked>:
/*---------------------------------------------------------------------------*/
uint8_t downButton_clicked()
{
	if(digitalRead(C,3)==LOW)
	{
		return 1;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	33 99       	sbic	0x06, 3	; 6
 4f2:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
 4f4:	08 95       	ret

000004f6 <backButton_clicked>:
/*---------------------------------------------------------------------------*/
uint8_t backButton_clicked()
{
	if(digitalRead(C,2)==LOW)
	{
		return 1;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	32 99       	sbic	0x06, 2	; 6
 4fa:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
 4fc:	08 95       	ret

000004fe <selectButton_clicked>:
/*---------------------------------------------------------------------------*/
uint8_t selectButton_clicked()
{
	if(digitalRead(C,0)==LOW)
	{
		return 1;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	30 99       	sbic	0x06, 0	; 6
 502:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return 0;
	}
}
 504:	08 95       	ret

00000506 <handleButtons>:
/*---------------------------------------------------------------------------*/
uint8_t handleButtons(struct menustate* ms)
{
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	ec 01       	movw	r28, r24
	uint8_t activity = 0;
	if(backButton_clicked())
 50c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <backButton_clicked>
 510:	88 23       	and	r24, r24
 512:	59 f0       	breq	.+22     	; 0x52a <handleButtons+0x24>
	{
		while(backButton_clicked());
 514:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <backButton_clicked>
 518:	88 23       	and	r24, r24
 51a:	e1 f7       	brne	.-8      	; 0x514 <handleButtons+0xe>
		activity = 1;
		lcdMenu_goBack(ms);
 51c:	ce 01       	movw	r24, r28
 51e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <lcdMenu_goBack>
		#if BUTTON_DEBUG
			xprintf(PSTR("> Back!\r\n"));
 522:	00 d0       	rcall	.+0      	; 0x524 <handleButtons+0x1e>
 524:	8b e9       	ldi	r24, 0x9B	; 155
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	2c c0       	rjmp	.+88     	; 0x582 <handleButtons+0x7c>
		#endif
	}
	else if(selectButton_clicked())
 52a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <selectButton_clicked>
 52e:	88 23       	and	r24, r24
 530:	59 f0       	breq	.+22     	; 0x548 <handleButtons+0x42>
	{
		while(selectButton_clicked());
 532:	0e 94 7f 02 	call	0x4fe	; 0x4fe <selectButton_clicked>
 536:	88 23       	and	r24, r24
 538:	e1 f7       	brne	.-8      	; 0x532 <handleButtons+0x2c>
		activity = 1;
		lcdMenu_select(ms);
 53a:	ce 01       	movw	r24, r28
 53c:	0e 94 00 04 	call	0x800	; 0x800 <lcdMenu_select>
		#if BUTTON_DEBUG
			xprintf(PSTR("> Select!\r\n"));
 540:	00 d0       	rcall	.+0      	; 0x542 <handleButtons+0x3c>
 542:	85 ea       	ldi	r24, 0xA5	; 165
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	1d c0       	rjmp	.+58     	; 0x582 <handleButtons+0x7c>
		#endif
	}
	else if(downButton_clicked())
 548:	0e 94 77 02 	call	0x4ee	; 0x4ee <downButton_clicked>
 54c:	88 23       	and	r24, r24
 54e:	59 f0       	breq	.+22     	; 0x566 <handleButtons+0x60>
	{
		while(downButton_clicked());
 550:	0e 94 77 02 	call	0x4ee	; 0x4ee <downButton_clicked>
 554:	88 23       	and	r24, r24
 556:	e1 f7       	brne	.-8      	; 0x550 <handleButtons+0x4a>
		activity = 1;
		lcdMenu_goDown(ms);
 558:	ce 01       	movw	r24, r28
 55a:	0e 94 27 04 	call	0x84e	; 0x84e <lcdMenu_goDown>
		#if BUTTON_DEBUG
			xprintf(PSTR("> Down!\r\n"));
 55e:	00 d0       	rcall	.+0      	; 0x560 <handleButtons+0x5a>
 560:	81 eb       	ldi	r24, 0xB1	; 177
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e c0       	rjmp	.+28     	; 0x582 <handleButtons+0x7c>
		#endif
	}
	else if(upButton_clicked())
 566:	0e 94 73 02 	call	0x4e6	; 0x4e6 <upButton_clicked>
 56a:	88 23       	and	r24, r24
 56c:	a1 f0       	breq	.+40     	; 0x596 <handleButtons+0x90>
	{
		while(upButton_clicked());
 56e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <upButton_clicked>
 572:	88 23       	and	r24, r24
 574:	e1 f7       	brne	.-8      	; 0x56e <handleButtons+0x68>
		activity = 1;
		lcdMenu_goUp(ms);
 576:	ce 01       	movw	r24, r28
 578:	0e 94 44 04 	call	0x888	; 0x888 <lcdMenu_goUp>
		#if BUTTON_DEBUG
			xprintf(PSTR("> Up!\r\n"));
 57c:	00 d0       	rcall	.+0      	; 0x57e <handleButtons+0x78>
 57e:	8b eb       	ldi	r24, 0xBB	; 187
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	ed b7       	in	r30, 0x3d	; 61
 584:	fe b7       	in	r31, 0x3e	; 62
 586:	92 83       	std	Z+2, r25	; 0x02
 588:	81 83       	std	Z+1, r24	; 0x01
 58a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <xprintf>
 58e:	0f 90       	pop	r0
 590:	0f 90       	pop	r0
		#endif
	}
	else if(upButton_clicked())
	{
		while(upButton_clicked());
		activity = 1;
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	01 c0       	rjmp	.+2      	; 0x598 <handleButtons+0x92>
	}
}
/*---------------------------------------------------------------------------*/
uint8_t handleButtons(struct menustate* ms)
{
	uint8_t activity = 0;
 596:	80 e0       	ldi	r24, 0x00	; 0
		#if BUTTON_DEBUG
			xprintf(PSTR("> Up!\r\n"));
		#endif
	}
	return activity;
}
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <main>:
/*---------------------------------------------------------------------------*/
struct menustate myMenuState;
/*---------------------------------------------------------------------------*/
int main()
{
	init_serial();
 59e:	0e 94 56 02 	call	0x4ac	; 0x4ac <init_serial>
	initButtons();
 5a2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <initButtons>
	pcd8544_begin(0x29);	
 5a6:	89 e2       	ldi	r24, 0x29	; 41
 5a8:	0e 94 78 03 	call	0x6f0	; 0x6f0 <pcd8544_begin>

	myMenuState.top = 0;	
 5ac:	10 92 d9 01 	sts	0x01D9, r1
	myMenuState.MAX_ROWS = 6;
 5b0:	86 e0       	ldi	r24, 0x06	; 6
 5b2:	80 93 da 01 	sts	0x01DA, r24
	myMenuState.last_top = 0;
 5b6:	10 92 db 01 	sts	0x01DB, r1
	myMenuState.currentItem = 0;
 5ba:	10 92 dc 01 	sts	0x01DC, r1
	myMenuState.last_currentItem = 0;
 5be:	10 92 dd 01 	sts	0x01DD, r1
	myMenuState.currentMenu = &mainMenu;
 5c2:	84 e6       	ldi	r24, 0x64	; 100
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	90 93 df 01 	sts	0x01DF, r25
 5ca:	80 93 de 01 	sts	0x01DE, r24

	lcdMenu_drawMenu(&myMenuState);
 5ce:	89 ed       	ldi	r24, 0xD9	; 217
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <lcdMenu_drawMenu>

	while(1)
	{
		if(handleButtons(&myMenuState))
 5d6:	89 ed       	ldi	r24, 0xD9	; 217
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	0e 94 83 02 	call	0x506	; 0x506 <handleButtons>
 5de:	88 23       	and	r24, r24
 5e0:	d1 f3       	breq	.-12     	; 0x5d6 <main+0x38>
 5e2:	f5 cf       	rjmp	.-22     	; 0x5ce <main+0x30>

000005e4 <lcdMenu_clearScreen>:
	return activity;
}
/*---------------------------------------------------------------------------*/
void lcdMenu_clearScreen()
{
	pcd8544_clear();
 5e4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <pcd8544_clear>
	pcd8544_gotoRc(0,0);
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	0e 94 52 03 	call	0x6a4	; 0x6a4 <pcd8544_gotoRc>
}
 5f0:	08 95       	ret

000005f2 <lcdMenu_printNormal>:
/*---------------------------------------------------------------------------*/
void lcdMenu_printNormal(const char* message)
{
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	ec 01       	movw	r28, r24
	pcd8544_print(" ");
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	91 e0       	ldi	r25, 0x01	; 1
 5fc:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <pcd8544_print>
	pcd8544_print(message);
 600:	ce 01       	movw	r24, r28
 602:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <pcd8544_print>
}
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	08 95       	ret

0000060c <lcdMenu_printSpecial>:
/*---------------------------------------------------------------------------*/
void lcdMenu_printSpecial(const char* message)
{	
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	ec 01       	movw	r28, r24
	pcd8544_print(">");
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <pcd8544_print>
	pcd8544_print(message);
 61a:	ce 01       	movw	r24, r28
 61c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <pcd8544_print>
}
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <lcdMenu_goNextLine>:
/*---------------------------------------------------------------------------*/
void lcdMenu_goNextLine()
{
	pcd8544_print("\r\n");
 626:	84 e0       	ldi	r24, 0x04	; 4
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <pcd8544_print>
}
 62e:	08 95       	ret

00000630 <pcd8544_inc_row_column>:
	current_column = column;
}
/*---------------------------------------------------------------------------*/
void pcd8544_inc_row_column(void)
{
	if (++current_column >= PCD8544_WIDTH) 
 630:	80 91 e0 01 	lds	r24, 0x01E0
 634:	8f 5f       	subi	r24, 0xFF	; 255
 636:	80 93 e0 01 	sts	0x01E0, r24
 63a:	84 35       	cpi	r24, 0x54	; 84
 63c:	58 f0       	brcs	.+22     	; 0x654 <pcd8544_inc_row_column+0x24>
	{
		current_column = 0;
 63e:	10 92 e0 01 	sts	0x01E0, r1
		if (++current_row >= PCD8544_LINES)
 642:	80 91 d8 01 	lds	r24, 0x01D8
 646:	8f 5f       	subi	r24, 0xFF	; 255
 648:	80 93 d8 01 	sts	0x01D8, r24
 64c:	86 30       	cpi	r24, 0x06	; 6
 64e:	10 f0       	brcs	.+4      	; 0x654 <pcd8544_inc_row_column+0x24>
		{
			current_row = 0;
 650:	10 92 d8 01 	sts	0x01D8, r1
 654:	08 95       	ret

00000656 <pcd8544_send>:
void pcd8544_send(uint8_t data_or_command, uint8_t data)
{
	uint8_t i = 0;

	// dc pin
	digitalWrite(B,1,data_or_command);
 656:	88 23       	and	r24, r24
 658:	11 f0       	breq	.+4      	; 0x65e <pcd8544_send+0x8>
 65a:	29 9a       	sbi	0x05, 1	; 5
 65c:	01 c0       	rjmp	.+2      	; 0x660 <pcd8544_send+0xa>
 65e:	29 98       	cbi	0x05, 1	; 5
	
	// digitalWrite(cs, LOW);		    

	// sck low
    digitalWrite(B,3,LOW);
 660:	2b 98       	cbi	0x05, 3	; 5
 662:	27 e0       	ldi	r18, 0x07	; 7
 664:	30 e0       	ldi	r19, 0x00	; 0

    for(i=0;i<8;i++)
    {

        if(data & (1<<(7-i)))
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	ab 01       	movw	r20, r22
 66a:	02 2e       	mov	r0, r18
 66c:	02 c0       	rjmp	.+4      	; 0x672 <pcd8544_send+0x1c>
 66e:	55 95       	asr	r21
 670:	47 95       	ror	r20
 672:	0a 94       	dec	r0
 674:	e2 f7       	brpl	.-8      	; 0x66e <pcd8544_send+0x18>
 676:	40 ff       	sbrs	r20, 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <pcd8544_send+0x28>
        {
        	// din high
            digitalWrite(B,2,HIGH);
 67a:	2a 9a       	sbi	0x05, 2	; 5
 67c:	01 c0       	rjmp	.+2      	; 0x680 <pcd8544_send+0x2a>
        }
        else
        {
        	// din low
            digitalWrite(B,2,LOW);
 67e:	2a 98       	cbi	0x05, 2	; 5
        }

        // sck high
        digitalWrite(B,3,HIGH);
 680:	2b 9a       	sbi	0x05, 3	; 5

        // sck low
        digitalWrite(B,3,LOW);
 682:	2b 98       	cbi	0x05, 3	; 5
 684:	21 50       	subi	r18, 0x01	; 1
 686:	30 40       	sbci	r19, 0x00	; 0
	// digitalWrite(cs, LOW);		    

	// sck low
    digitalWrite(B,3,LOW);

    for(i=0;i<8;i++)
 688:	9f ef       	ldi	r25, 0xFF	; 255
 68a:	2f 3f       	cpi	r18, 0xFF	; 255
 68c:	39 07       	cpc	r19, r25
 68e:	61 f7       	brne	.-40     	; 0x668 <pcd8544_send+0x12>
        digitalWrite(B,3,LOW);
    }
	
	// digitalWrite(cs, HIGH);
	
	if(data_or_command)
 690:	88 23       	and	r24, r24
 692:	11 f0       	breq	.+4      	; 0x698 <pcd8544_send+0x42>
	{
		pcd8544_inc_row_column();
 694:	0e 94 18 03 	call	0x630	; 0x630 <pcd8544_inc_row_column>
 698:	08 95       	ret

0000069a <pcd8544_command>:
{
	pcd8544_send(1, data);
}
/*---------------------------------------------------------------------------*/
void pcd8544_command(uint8_t data)
{
 69a:	68 2f       	mov	r22, r24
	pcd8544_send(0, data);
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	0e 94 2b 03 	call	0x656	; 0x656 <pcd8544_send>
}
 6a2:	08 95       	ret

000006a4 <pcd8544_gotoRc>:
{
	pcd8544_gotoRc(row, 6*column);
}
/*---------------------------------------------------------------------------*/
void pcd8544_gotoRc(uint8_t row, uint8_t column)
{
 6a4:	a1 e0       	ldi	r26, 0x01	; 1
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	e8 e5       	ldi	r30, 0x58	; 88
 6aa:	f3 e0       	ldi	r31, 0x03	; 3
 6ac:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__prologue_saves__+0x1e>
 6b0:	98 2f       	mov	r25, r24
 6b2:	16 2f       	mov	r17, r22
	if (row >= PCD8544_LINES)
 6b4:	86 30       	cpi	r24, 0x06	; 6
 6b6:	18 f0       	brcs	.+6      	; 0x6be <pcd8544_gotoRc+0x1a>
	{
		row %= PCD8544_LINES;
 6b8:	66 e0       	ldi	r22, 0x06	; 6
 6ba:	0e 94 8b 04 	call	0x916	; 0x916 <__udivmodqi4>
	}
	if (column >= PCD8544_WIDTH)
 6be:	14 35       	cpi	r17, 0x54	; 84
 6c0:	20 f0       	brcs	.+8      	; 0x6ca <pcd8544_gotoRc+0x26>
	{
		row %= PCD8544_WIDTH;
 6c2:	89 2f       	mov	r24, r25
 6c4:	64 e5       	ldi	r22, 0x54	; 84
 6c6:	0e 94 8b 04 	call	0x916	; 0x916 <__udivmodqi4>
	}
	pcd8544_command(PCD8544_SET_X_ADDRESS | column);
 6ca:	81 2f       	mov	r24, r17
 6cc:	80 68       	ori	r24, 0x80	; 128
 6ce:	99 83       	std	Y+1, r25	; 0x01
 6d0:	0e 94 4d 03 	call	0x69a	; 0x69a <pcd8544_command>
	pcd8544_command(PCD8544_SET_Y_ADDRESS | row);
 6d4:	99 81       	ldd	r25, Y+1	; 0x01
 6d6:	89 2f       	mov	r24, r25
 6d8:	80 64       	ori	r24, 0x40	; 64
 6da:	0e 94 4d 03 	call	0x69a	; 0x69a <pcd8544_command>
	current_row = row;
 6de:	99 81       	ldd	r25, Y+1	; 0x01
 6e0:	90 93 d8 01 	sts	0x01D8, r25
	current_column = column;
 6e4:	10 93 e0 01 	sts	0x01E0, r17
}
 6e8:	21 96       	adiw	r28, 0x01	; 1
 6ea:	e3 e0       	ldi	r30, 0x03	; 3
 6ec:	0c 94 c2 04 	jmp	0x984	; 0x984 <__epilogue_restores__+0x1e>

000006f0 <pcd8544_begin>:
	{0x10,0x08,0x08,0x10,0x08,}, // '~' 126
	{0x08,0x1C,0x2A,0x08,0x08,} //  <-  127
};
/*---------------------------------------------------------------------------*/
void pcd8544_begin(uint8_t contrast)
{
 6f0:	cf 93       	push	r28
 6f2:	c8 2f       	mov	r28, r24
	// cs pin
	// pinMode(cs,OUTPUT);

	// reset pin
	pinMode(B,0,OUTPUT);
 6f4:	20 9a       	sbi	0x04, 0	; 4

	// DC pin
	pinMode(B,1,OUTPUT);
 6f6:	21 9a       	sbi	0x04, 1	; 4

	// DATA pin
	pinMode(B,2,OUTPUT);
 6f8:	22 9a       	sbi	0x04, 2	; 4

	// CLK pin
	pinMode(B,3,OUTPUT);
 6fa:	23 9a       	sbi	0x04, 3	; 4

	// set reset low
	digitalWrite(B,0,LOW);	
 6fc:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6fe:	8f e9       	ldi	r24, 0x9F	; 159
 700:	9f e0       	ldi	r25, 0x0F	; 15
 702:	01 97       	sbiw	r24, 0x01	; 1
 704:	f1 f7       	brne	.-4      	; 0x702 <pcd8544_begin+0x12>
 706:	00 c0       	rjmp	.+0      	; 0x708 <pcd8544_begin+0x18>
 708:	00 00       	nop
	// wait a little amount of time
	_delay_ms(1);
	// set reset high
	digitalWrite(B,0,HIGH);
 70a:	28 9a       	sbi	0x05, 0	; 5
  
	// Extenden instructions and !powerdown
	// and horizontal adressing (autoincrement of x-adress)
	pcd8544_command(PCD8544_FUNCTION_SET | PCD8544_FUNCTION_H);
 70c:	81 e2       	ldi	r24, 0x21	; 33
 70e:	0e 94 4d 03 	call	0x69a	; 0x69a <pcd8544_command>
	// Set Vop to 0x3F
	pcd8544_command(PCD8544_VOP | contrast);
 712:	8c 2f       	mov	r24, r28
 714:	80 68       	ori	r24, 0x80	; 128
 716:	0e 94 4d 03 	call	0x69a	; 0x69a <pcd8544_command>
	// Vlcd temp. coeff. 0
	pcd8544_command(PCD8544_TEMP_CONTROL);
 71a:	84 e0       	ldi	r24, 0x04	; 4
 71c:	0e 94 4d 03 	call	0x69a	; 0x69a <pcd8544_command>
	// Bias system 4, 1:48
	pcd8544_command(PCD8544_BIAS | PCD8544_BIAS_BS1 | PCD8544_BIAS_BS0);
 720:	83 e1       	ldi	r24, 0x13	; 19
 722:	0e 94 4d 03 	call	0x69a	; 0x69a <pcd8544_command>
	// Set H = 0 for normal instructions
	pcd8544_command(PCD8544_FUNCTION_SET);  
 726:	80 e2       	ldi	r24, 0x20	; 32
 728:	0e 94 4d 03 	call	0x69a	; 0x69a <pcd8544_command>
	// Normal mode
	pcd8544_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_CONTROL_NORMAL_MODE);
 72c:	8c e0       	ldi	r24, 0x0C	; 12
 72e:	0e 94 4d 03 	call	0x69a	; 0x69a <pcd8544_command>
}
 732:	cf 91       	pop	r28
 734:	08 95       	ret

00000736 <pcd8544_data>:
		pcd8544_data(0);
	}
}
/*---------------------------------------------------------------------------*/
void pcd8544_data(uint8_t data)
{
 736:	68 2f       	mov	r22, r24
	pcd8544_send(1, data);
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	0e 94 2b 03 	call	0x656	; 0x656 <pcd8544_send>
}
 73e:	08 95       	ret

00000740 <pcd8544_write>:
		pcd8544_data(0);
	}
}
/*---------------------------------------------------------------------------*/
void pcd8544_write(uint8_t ch)
{
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	c8 2f       	mov	r28, r24
	uint8_t i;

	if (ch == '\r')
 74a:	8d 30       	cpi	r24, 0x0D	; 13
 74c:	21 f4       	brne	.+8      	; 0x756 <pcd8544_write+0x16>
	{
		pcd8544_gotoRc(current_row, 0);
 74e:	80 91 d8 01 	lds	r24, 0x01D8
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	07 c0       	rjmp	.+14     	; 0x764 <pcd8544_write+0x24>
	}
	if (ch == '\n')
 756:	8a 30       	cpi	r24, 0x0A	; 10
 758:	39 f4       	brne	.+14     	; 0x768 <pcd8544_write+0x28>
	{
		pcd8544_gotoRc(current_row+1, current_column);
 75a:	80 91 d8 01 	lds	r24, 0x01D8
 75e:	8f 5f       	subi	r24, 0xFF	; 255
 760:	60 91 e0 01 	lds	r22, 0x01E0
 764:	0e 94 52 03 	call	0x6a4	; 0x6a4 <pcd8544_gotoRc>
	}
	if (ch >= ' ' && ch <= 127) 
 768:	8c 2f       	mov	r24, r28
 76a:	80 52       	subi	r24, 0x20	; 32
 76c:	80 36       	cpi	r24, 0x60	; 96
 76e:	d8 f4       	brcc	.+54     	; 0x7a6 <pcd8544_write+0x66>
	{
		for (i = 0; i < 5; i++)
		{
			pcd8544_data(pgm_read_byte(&font6x8[ch-' '][i]) <<1);
 770:	8c 2f       	mov	r24, r28
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	8c 01       	movw	r16, r24
 776:	00 0f       	add	r16, r16
 778:	11 1f       	adc	r17, r17
 77a:	00 0f       	add	r16, r16
 77c:	11 1f       	adc	r17, r17
 77e:	08 0f       	add	r16, r24
 780:	19 1f       	adc	r17, r25
 782:	c0 e0       	ldi	r28, 0x00	; 0
 784:	d0 e0       	ldi	r29, 0x00	; 0
	{
		pcd8544_data(0);
	}
}
/*---------------------------------------------------------------------------*/
void pcd8544_write(uint8_t ch)
 786:	0d 5d       	subi	r16, 0xDD	; 221
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	f8 01       	movw	r30, r16
 78c:	ec 0f       	add	r30, r28
 78e:	fd 1f       	adc	r31, r29
	}
	if (ch >= ' ' && ch <= 127) 
	{
		for (i = 0; i < 5; i++)
		{
			pcd8544_data(pgm_read_byte(&font6x8[ch-' '][i]) <<1);
 790:	84 91       	lpm	r24, Z
 792:	88 0f       	add	r24, r24
 794:	0e 94 9b 03 	call	0x736	; 0x736 <pcd8544_data>
 798:	21 96       	adiw	r28, 0x01	; 1
	{
		pcd8544_gotoRc(current_row+1, current_column);
	}
	if (ch >= ' ' && ch <= 127) 
	{
		for (i = 0; i < 5; i++)
 79a:	c5 30       	cpi	r28, 0x05	; 5
 79c:	d1 05       	cpc	r29, r1
 79e:	a9 f7       	brne	.-22     	; 0x78a <pcd8544_write+0x4a>
		{
			pcd8544_data(pgm_read_byte(&font6x8[ch-' '][i]) <<1);
		}
		pcd8544_data(0);
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	0e 94 9b 03 	call	0x736	; 0x736 <pcd8544_data>
	}
}
 7a6:	df 91       	pop	r29
 7a8:	cf 91       	pop	r28
 7aa:	1f 91       	pop	r17
 7ac:	0f 91       	pop	r16
 7ae:	08 95       	ret

000007b0 <pcd8544_clear>:
	// Normal mode
	pcd8544_command(PCD8544_DISPLAY_CONTROL | PCD8544_DISPLAY_CONTROL_NORMAL_MODE);
}
/*---------------------------------------------------------------------------*/
void pcd8544_clear(void)
{
 7b0:	cf 93       	push	r28
 7b2:	df 93       	push	r29
 7b4:	c8 ef       	ldi	r28, 0xF8	; 248
 7b6:	d1 e0       	ldi	r29, 0x01	; 1
	int i;
	for (i = 0; i < PCD8544_WIDTH*PCD8544_LINES; i++)
	{
		pcd8544_data(0);
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	0e 94 9b 03 	call	0x736	; 0x736 <pcd8544_data>
 7be:	21 97       	sbiw	r28, 0x01	; 1
}
/*---------------------------------------------------------------------------*/
void pcd8544_clear(void)
{
	int i;
	for (i = 0; i < PCD8544_WIDTH*PCD8544_LINES; i++)
 7c0:	d9 f7       	brne	.-10     	; 0x7b8 <pcd8544_clear+0x8>
	{
		pcd8544_data(0);
	}
}
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	08 95       	ret

000007c8 <pcd8544_print>:
		}
	}
}
/*---------------------------------------------------------------------------*/
void pcd8544_print(const char* message)
{
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	ec 01       	movw	r28, r24
	while(*message)
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <pcd8544_print+0xc>
	{
		pcd8544_write(*message++);
 7d0:	0e 94 a0 03 	call	0x740	; 0x740 <pcd8544_write>
	}
}
/*---------------------------------------------------------------------------*/
void pcd8544_print(const char* message)
{
	while(*message)
 7d4:	89 91       	ld	r24, Y+
 7d6:	88 23       	and	r24, r24
 7d8:	d9 f7       	brne	.-10     	; 0x7d0 <pcd8544_print+0x8>
	{
		pcd8544_write(*message++);
	}
}
 7da:	df 91       	pop	r29
 7dc:	cf 91       	pop	r28
 7de:	08 95       	ret

000007e0 <lcdMenu_goBack>:
/ this stuff is worth it, you can buy me a coffee in return.
/----------------------------------------------------------------------------*/
#include "lcdMenu.h"
/*---------------------------------------------------------------------------*/
void lcdMenu_goBack(struct menustate* ms)
{
 7e0:	fc 01       	movw	r30, r24
	if(ms->currentMenu->parent != NULL)
 7e2:	a5 81       	ldd	r26, Z+5	; 0x05
 7e4:	b6 81       	ldd	r27, Z+6	; 0x06
 7e6:	11 96       	adiw	r26, 0x01	; 1
 7e8:	8d 91       	ld	r24, X+
 7ea:	9c 91       	ld	r25, X
 7ec:	12 97       	sbiw	r26, 0x02	; 2
 7ee:	00 97       	sbiw	r24, 0x00	; 0
 7f0:	31 f0       	breq	.+12     	; 0x7fe <lcdMenu_goBack+0x1e>
	{
		ms->currentMenu = ms->currentMenu->parent;		
 7f2:	96 83       	std	Z+6, r25	; 0x06
 7f4:	85 83       	std	Z+5, r24	; 0x05
		ms->top = ms->last_top;
 7f6:	82 81       	ldd	r24, Z+2	; 0x02
 7f8:	80 83       	st	Z, r24
		ms->currentItem = ms->last_currentItem;		
 7fa:	84 81       	ldd	r24, Z+4	; 0x04
 7fc:	83 83       	std	Z+3, r24	; 0x03
 7fe:	08 95       	ret

00000800 <lcdMenu_select>:
	}
}
/*---------------------------------------------------------------------------*/
void lcdMenu_select(struct menustate* ms)
{
 800:	fc 01       	movw	r30, r24
	if(ms->currentMenu->menuArray[ms->currentItem]->child != NULL)
 802:	23 81       	ldd	r18, Z+3	; 0x03
 804:	a5 81       	ldd	r26, Z+5	; 0x05
 806:	b6 81       	ldd	r27, Z+6	; 0x06
 808:	82 2f       	mov	r24, r18
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	13 96       	adiw	r26, 0x03	; 3
 812:	0d 90       	ld	r0, X+
 814:	bc 91       	ld	r27, X
 816:	a0 2d       	mov	r26, r0
 818:	a8 0f       	add	r26, r24
 81a:	b9 1f       	adc	r27, r25
 81c:	0d 90       	ld	r0, X+
 81e:	bc 91       	ld	r27, X
 820:	a0 2d       	mov	r26, r0
 822:	14 96       	adiw	r26, 0x04	; 4
 824:	8d 91       	ld	r24, X+
 826:	9c 91       	ld	r25, X
 828:	15 97       	sbiw	r26, 0x05	; 5
 82a:	00 97       	sbiw	r24, 0x00	; 0
 82c:	41 f0       	breq	.+16     	; 0x83e <lcdMenu_select+0x3e>
	{
		ms->currentMenu = ms->currentMenu->menuArray[ms->currentItem]->child;
 82e:	96 83       	std	Z+6, r25	; 0x06
 830:	85 83       	std	Z+5, r24	; 0x05
		ms->last_top = ms->top;
 832:	80 81       	ld	r24, Z
 834:	82 83       	std	Z+2, r24	; 0x02
		ms->last_currentItem = ms->currentItem;
 836:	24 83       	std	Z+4, r18	; 0x04
		ms->top = 0;
 838:	10 82       	st	Z, r1
		ms->currentItem = 0;
 83a:	13 82       	std	Z+3, r1	; 0x03
 83c:	08 95       	ret
	}
	else if(ms->currentMenu->menuArray[ms->currentItem]->handlerFunc != NULL)
 83e:	12 96       	adiw	r26, 0x02	; 2
 840:	ed 91       	ld	r30, X+
 842:	fc 91       	ld	r31, X
 844:	13 97       	sbiw	r26, 0x03	; 3
 846:	30 97       	sbiw	r30, 0x00	; 0
 848:	09 f0       	breq	.+2      	; 0x84c <lcdMenu_select+0x4c>
	{
		lcdMenu_callFunction(ms->currentMenu->menuArray[ms->currentItem]->handlerFunc);
 84a:	09 95       	icall
 84c:	08 95       	ret

0000084e <lcdMenu_goDown>:
	}
}
/*---------------------------------------------------------------------------*/
void lcdMenu_goDown(struct menustate* ms)
{
 84e:	fc 01       	movw	r30, r24
	if(ms->top != ms->currentMenu->length)
 850:	60 81       	ld	r22, Z
 852:	a5 81       	ldd	r26, Z+5	; 0x05
 854:	b6 81       	ldd	r27, Z+6	; 0x06
 856:	2c 91       	ld	r18, X
 858:	62 17       	cp	r22, r18
 85a:	a9 f0       	breq	.+42     	; 0x886 <lcdMenu_goDown+0x38>
	{
		if(ms->currentItem != (ms->currentMenu->length-1))
 85c:	83 81       	ldd	r24, Z+3	; 0x03
 85e:	48 2f       	mov	r20, r24
 860:	50 e0       	ldi	r21, 0x00	; 0
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	21 50       	subi	r18, 0x01	; 1
 866:	30 40       	sbci	r19, 0x00	; 0
 868:	42 17       	cp	r20, r18
 86a:	53 07       	cpc	r21, r19
 86c:	61 f0       	breq	.+24     	; 0x886 <lcdMenu_goDown+0x38>
		{
			ms->currentItem += 1;
 86e:	8f 5f       	subi	r24, 0xFF	; 255
 870:	83 83       	std	Z+3, r24	; 0x03
			if(((ms->currentItem)-(ms->top))==ms->MAX_ROWS)
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	86 1b       	sub	r24, r22
 876:	91 09       	sbc	r25, r1
 878:	21 81       	ldd	r18, Z+1	; 0x01
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	82 17       	cp	r24, r18
 87e:	93 07       	cpc	r25, r19
 880:	11 f4       	brne	.+4      	; 0x886 <lcdMenu_goDown+0x38>
			{
				ms->top += 1;
 882:	6f 5f       	subi	r22, 0xFF	; 255
 884:	60 83       	st	Z, r22
 886:	08 95       	ret

00000888 <lcdMenu_goUp>:
		}
	}	
}
/*---------------------------------------------------------------------------*/
void lcdMenu_goUp(struct menustate* ms)
{
 888:	fc 01       	movw	r30, r24
	if(!((ms->top==0)&(ms->currentItem==0)))
 88a:	80 81       	ld	r24, Z
 88c:	93 81       	ldd	r25, Z+3	; 0x03
 88e:	99 23       	and	r25, r25
 890:	11 f4       	brne	.+4      	; 0x896 <lcdMenu_goUp+0xe>
 892:	88 23       	and	r24, r24
 894:	31 f0       	breq	.+12     	; 0x8a2 <lcdMenu_goUp+0x1a>
	{
		ms->currentItem = ms->currentItem - 1;
 896:	91 50       	subi	r25, 0x01	; 1
 898:	93 83       	std	Z+3, r25	; 0x03
		if((ms->top > ms->currentItem))
 89a:	98 17       	cp	r25, r24
 89c:	10 f4       	brcc	.+4      	; 0x8a2 <lcdMenu_goUp+0x1a>
		{
			ms->top = ms->top -1;
 89e:	81 50       	subi	r24, 0x01	; 1
 8a0:	80 83       	st	Z, r24
 8a2:	08 95       	ret

000008a4 <lcdMenu_drawMenu>:
		}
	}	
}
/*---------------------------------------------------------------------------*/
void lcdMenu_drawMenu(struct menustate* ms)
{
 8a4:	0f 93       	push	r16
 8a6:	1f 93       	push	r17
 8a8:	cf 93       	push	r28
 8aa:	8c 01       	movw	r16, r24
	uint8_t i;

	lcdMenu_clearScreen();
 8ac:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <lcdMenu_clearScreen>
	
	for (i = ms->top; i < ms->top+ms->MAX_ROWS; ++i)
 8b0:	d8 01       	movw	r26, r16
 8b2:	cc 91       	ld	r28, X
 8b4:	21 c0       	rjmp	.+66     	; 0x8f8 <lcdMenu_drawMenu+0x54>
	{
		if(i<ms->currentMenu->length)
 8b6:	d8 01       	movw	r26, r16
 8b8:	15 96       	adiw	r26, 0x05	; 5
 8ba:	ed 91       	ld	r30, X+
 8bc:	fc 91       	ld	r31, X
 8be:	16 97       	sbiw	r26, 0x06	; 6
 8c0:	20 81       	ld	r18, Z
 8c2:	c2 17       	cp	r28, r18
 8c4:	b0 f4       	brcc	.+44     	; 0x8f2 <lcdMenu_drawMenu+0x4e>
		{
			if (ms->currentItem==i)
 8c6:	13 96       	adiw	r26, 0x03	; 3
 8c8:	4c 91       	ld	r20, X
 8ca:	9c 01       	movw	r18, r24
 8cc:	22 0f       	add	r18, r18
 8ce:	33 1f       	adc	r19, r19
 8d0:	83 81       	ldd	r24, Z+3	; 0x03
 8d2:	94 81       	ldd	r25, Z+4	; 0x04
			{
				lcdMenu_printSpecial(ms->currentMenu->menuArray[i]->name);
 8d4:	82 0f       	add	r24, r18
 8d6:	93 1f       	adc	r25, r19
 8d8:	dc 01       	movw	r26, r24
 8da:	ed 91       	ld	r30, X+
 8dc:	fc 91       	ld	r31, X
 8de:	11 97       	sbiw	r26, 0x01	; 1
 8e0:	80 81       	ld	r24, Z
 8e2:	91 81       	ldd	r25, Z+1	; 0x01
	
	for (i = ms->top; i < ms->top+ms->MAX_ROWS; ++i)
	{
		if(i<ms->currentMenu->length)
		{
			if (ms->currentItem==i)
 8e4:	4c 17       	cp	r20, r28
 8e6:	19 f4       	brne	.+6      	; 0x8ee <lcdMenu_drawMenu+0x4a>
			{
				lcdMenu_printSpecial(ms->currentMenu->menuArray[i]->name);
 8e8:	0e 94 06 03 	call	0x60c	; 0x60c <lcdMenu_printSpecial>
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <lcdMenu_drawMenu+0x4e>
				lcdMenu_goNextLine();
			}
			else
			{
				lcdMenu_printNormal(ms->currentMenu->menuArray[i]->name);
 8ee:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <lcdMenu_printNormal>
				lcdMenu_goNextLine();
			}
		}
		else
		{
			lcdMenu_goNextLine();
 8f2:	0e 94 13 03 	call	0x626	; 0x626 <lcdMenu_goNextLine>
{
	uint8_t i;

	lcdMenu_clearScreen();
	
	for (i = ms->top; i < ms->top+ms->MAX_ROWS; ++i)
 8f6:	cf 5f       	subi	r28, 0xFF	; 255
 8f8:	8c 2f       	mov	r24, r28
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	f8 01       	movw	r30, r16
 8fe:	40 81       	ld	r20, Z
 900:	21 81       	ldd	r18, Z+1	; 0x01
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	24 0f       	add	r18, r20
 906:	31 1d       	adc	r19, r1
 908:	82 17       	cp	r24, r18
 90a:	93 07       	cpc	r25, r19
 90c:	a4 f2       	brlt	.-88     	; 0x8b6 <lcdMenu_drawMenu+0x12>
		else
		{
			lcdMenu_goNextLine();
		}
	}	
}
 90e:	cf 91       	pop	r28
 910:	1f 91       	pop	r17
 912:	0f 91       	pop	r16
 914:	08 95       	ret

00000916 <__udivmodqi4>:
 916:	99 1b       	sub	r25, r25
 918:	79 e0       	ldi	r23, 0x09	; 9
 91a:	04 c0       	rjmp	.+8      	; 0x924 <__udivmodqi4_ep>

0000091c <__udivmodqi4_loop>:
 91c:	99 1f       	adc	r25, r25
 91e:	96 17       	cp	r25, r22
 920:	08 f0       	brcs	.+2      	; 0x924 <__udivmodqi4_ep>
 922:	96 1b       	sub	r25, r22

00000924 <__udivmodqi4_ep>:
 924:	88 1f       	adc	r24, r24
 926:	7a 95       	dec	r23
 928:	c9 f7       	brne	.-14     	; 0x91c <__udivmodqi4_loop>
 92a:	80 95       	com	r24
 92c:	08 95       	ret

0000092e <__prologue_saves__>:
 92e:	2f 92       	push	r2
 930:	3f 92       	push	r3
 932:	4f 92       	push	r4
 934:	5f 92       	push	r5
 936:	6f 92       	push	r6
 938:	7f 92       	push	r7
 93a:	8f 92       	push	r8
 93c:	9f 92       	push	r9
 93e:	af 92       	push	r10
 940:	bf 92       	push	r11
 942:	cf 92       	push	r12
 944:	df 92       	push	r13
 946:	ef 92       	push	r14
 948:	ff 92       	push	r15
 94a:	0f 93       	push	r16
 94c:	1f 93       	push	r17
 94e:	cf 93       	push	r28
 950:	df 93       	push	r29
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62
 956:	ca 1b       	sub	r28, r26
 958:	db 0b       	sbc	r29, r27
 95a:	0f b6       	in	r0, 0x3f	; 63
 95c:	f8 94       	cli
 95e:	de bf       	out	0x3e, r29	; 62
 960:	0f be       	out	0x3f, r0	; 63
 962:	cd bf       	out	0x3d, r28	; 61
 964:	09 94       	ijmp

00000966 <__epilogue_restores__>:
 966:	2a 88       	ldd	r2, Y+18	; 0x12
 968:	39 88       	ldd	r3, Y+17	; 0x11
 96a:	48 88       	ldd	r4, Y+16	; 0x10
 96c:	5f 84       	ldd	r5, Y+15	; 0x0f
 96e:	6e 84       	ldd	r6, Y+14	; 0x0e
 970:	7d 84       	ldd	r7, Y+13	; 0x0d
 972:	8c 84       	ldd	r8, Y+12	; 0x0c
 974:	9b 84       	ldd	r9, Y+11	; 0x0b
 976:	aa 84       	ldd	r10, Y+10	; 0x0a
 978:	b9 84       	ldd	r11, Y+9	; 0x09
 97a:	c8 84       	ldd	r12, Y+8	; 0x08
 97c:	df 80       	ldd	r13, Y+7	; 0x07
 97e:	ee 80       	ldd	r14, Y+6	; 0x06
 980:	fd 80       	ldd	r15, Y+5	; 0x05
 982:	0c 81       	ldd	r16, Y+4	; 0x04
 984:	1b 81       	ldd	r17, Y+3	; 0x03
 986:	aa 81       	ldd	r26, Y+2	; 0x02
 988:	b9 81       	ldd	r27, Y+1	; 0x01
 98a:	ce 0f       	add	r28, r30
 98c:	d1 1d       	adc	r29, r1
 98e:	0f b6       	in	r0, 0x3f	; 63
 990:	f8 94       	cli
 992:	de bf       	out	0x3e, r29	; 62
 994:	0f be       	out	0x3f, r0	; 63
 996:	cd bf       	out	0x3d, r28	; 61
 998:	ed 01       	movw	r28, r26
 99a:	08 95       	ret

0000099c <_exit>:
 99c:	f8 94       	cli

0000099e <__stop_program>:
 99e:	ff cf       	rjmp	.-2      	; 0x99e <__stop_program>
